// Code generated by protoc-gen-go.
// source: sample.proto
// DO NOT EDIT!

/*
Package grpctest is a generated protocol buffer package.

It is generated from these files:
	sample.proto

It has these top-level messages:
	EmptyRequest
	EmptyResponse
*/
package grpctest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EmptyRequest struct {
}

func (m *EmptyRequest) Reset()         { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()    {}

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()         { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Working service

type WorkingClient interface {
	ThisWorks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type workingClient struct {
	cc *grpc.ClientConn
}

func NewWorkingClient(cc *grpc.ClientConn) WorkingClient {
	return &workingClient{cc}
}

func (c *workingClient) ThisWorks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/grpctest.Working/ThisWorks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Working service

type WorkingServer interface {
	ThisWorks(context.Context, *EmptyRequest) (*EmptyResponse, error)
}

func RegisterWorkingServer(s *grpc.Server, srv WorkingServer) {
	s.RegisterService(&_Working_serviceDesc, srv)
}

func _Working_ThisWorks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(WorkingServer).ThisWorks(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Working_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpctest.Working",
	HandlerType: (*WorkingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ThisWorks",
			Handler:    _Working_ThisWorks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for NotWorking service

type NotWorkingClient interface {
	Unimplemented(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type notWorkingClient struct {
	cc *grpc.ClientConn
}

func NewNotWorkingClient(cc *grpc.ClientConn) NotWorkingClient {
	return &notWorkingClient{cc}
}

func (c *notWorkingClient) Unimplemented(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/grpctest.NotWorking/Unimplemented", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NotWorking service

type NotWorkingServer interface {
	Unimplemented(context.Context, *EmptyRequest) (*EmptyResponse, error)
}

func RegisterNotWorkingServer(s *grpc.Server, srv NotWorkingServer) {
	s.RegisterService(&_NotWorking_serviceDesc, srv)
}

func _NotWorking_Unimplemented_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NotWorkingServer).Unimplemented(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _NotWorking_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpctest.NotWorking",
	HandlerType: (*NotWorkingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unimplemented",
			Handler:    _NotWorking_Unimplemented_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
